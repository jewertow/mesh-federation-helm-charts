{{/* Build list of exported hostnames to check for conflicts */}}
{{- $exportedHostnames := list }}
{{- range $export := .Values.export }}
{{- $exportedHostnames = append $exportedHostnames $export.hostname }}
{{- end }}

{{- range $idx, $svc := .Values.import }}
{{- $hostname := required (printf "import[%d].hostname is required" $idx) $svc.hostname }}
{{- $resName := printf "import-%s" (replace $hostname "." "-" ) }}
{{/* Only create import service entry if hostname is not being exported */}}
{{- if not (has $hostname $exportedHostnames) }}
apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: import-{{ printf "%s" $svc.hostname | replace "." "-" | trunc 253 }}
  namespace: {{ $.Release.Namespace }}
spec:
  exportTo:
  - "."
  hosts:
  - {{ $hostname }}
  ports:
  {{- $ports := $svc.ports | default $.Values.global.defaultServicePorts }}
  {{- range $port := $ports }}
  - number: {{ $port.number }}
    name: {{ $port.name }}
    protocol: {{ $port.protocol }}
  {{- end }}
  location: MESH_INTERNAL
  resolution: DNS
  endpoints:
  {{- if $.Values.global.egressGateway.enabled }}
  - address: {{ $.Values.global.egressGateway.service.name }}.{{ $.Values.global.egressGateway.service.namespace }}.svc.cluster.local
    ports:
    {{- range $port := $ports }}
      {{ $port.name }}: {{ $.Values.global.egressGateway.port }}
    {{- end }}
  {{- else }}
  {{- range $mesh := $.Values.global.remote }}
  {{- if has $hostname $mesh.importedServices }}
  {{- range $addr := $mesh.addresses }}
  - address: {{ $addr }}
    ports:
    {{- range $port := $ports }}
      {{ $port.name }}: {{ $mesh.port }}
    {{- end }}
    network: {{ $mesh.network }}
    {{- if $mesh.locality }}
    locality: {{ $mesh.locality }}
    {{- end }}
    labels:
      security.istio.io/tlsMode: istio
      topology.istio.io/cluster: {{ $mesh.mesh }}
  {{- end }}
  {{- end }}
  {{- end }}
  {{- end }}
---
{{- end }}
{{- end }}
{{/* Build list of imported hostnames to check for conflicts */}}
{{- $importedHostnames := list }}
{{- range $import := .Values.import }}
{{- $importedHostnames = append $importedHostnames $import.hostname }}
{{- end }}

{{- range $export := .Values.export }}
apiVersion: networking.istio.io/v1
kind: ServiceEntry
metadata:
  name: export-{{ printf "%s" $export.hostname | replace "." "-" | trunc 253 }}
  namespace: {{ $.Release.Namespace }}
spec:
  hosts:
  - {{ $export.hostname }}
  location: MESH_INTERNAL
  ports:
  {{- $ports := $export.ports | default $.Values.global.defaultServicePorts }}
  {{- range $port := $ports }}
  - number: {{ $port.number }}
    name: {{ $port.name }}
    protocol: {{ $port.protocol }}
    {{- if $port.targetPort }}
    targetPort: {{ $port.targetPort }}
    {{- end }}
  {{- end }}
  resolution: STATIC
  workloadSelector:
    labels:
      {{- with $export.labelSelector }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
---
{{/* If hostname is both exported and imported, create WorkloadEntry for each remote network */}}
{{- if has $export.hostname $importedHostnames }}
{{- range $mesh := $.Values.global.remote }}
{{- if has $export.hostname $mesh.importedServices }}
{{- range $addrIdx, $addr := $mesh.addresses }}
apiVersion: networking.istio.io/v1
kind: WorkloadEntry
metadata:
  name: {{ printf "%s-%s-%d" ($export.hostname | replace "." "-" | trunc 230) ($mesh.network | replace "." "-" | trunc 10) $addrIdx }}
  namespace: {{ $.Release.Namespace }}
spec:
  {{- if not $.Values.global.useGatewayAPI }}
  address: {{ $addr }}
  {{- end }}
  ports:
  {{- range $port := $ports }}
    {{ $port.name }}: {{ $port.number }}
  {{- end }}
  network: {{ $mesh.network }}
  {{- if $mesh.locality }}
  locality: {{ $mesh.locality }}
  {{- end }}
  labels:
    {{- with $export.labelSelector }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
    security.istio.io/tlsMode: istio
    topology.istio.io/cluster: {{ $mesh.mesh }}
---
{{- end }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
